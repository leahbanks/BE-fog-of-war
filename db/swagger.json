{
  "openapi": "3.0.1",
  "info": {
    "title": "Fog of War API",
    "description": "API docs for endpoints with Fog of War app",
    "version": "0.1"
  },
  "components": {
    "securitySchemes": {
      "passport": {
        "type": "oauth2",
        "description": "Passport Authentication",
        "flows": {
          "implicit": {
            "authorizationUrl": "/auth/google",
            "scopes": {
              "read": "Grants read-only access to user profiles",
              "write": "Grants write access to user profiles"
            }
          }
        }
      }
    }
  },
  "host": "https://fog-of-war.onrender.com",
  "basePath": "/",
  "schemes": ["http"],
  "paths": {
    "/api/users": {
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "example": {
                  "avatar_url": "https://www.coolpictures.com/reallycoolimage.jpeg",
                  "username": "JessSmith@gmail.com",
                  "display_name": "Jess"
                }
              }
            }
          }
        },
        "description": "# Used for creation of new user when registering for an account. Auth system still isn't worked out yet but we believe data relating to authentication should be stored in a private table.\n#  ",
        "tags": ["Users"],
        "summary": "Creates a new user"
      },
      "get": {
        "tags": ["Users"],
        "description": "# Returns some basic information about users (no passwords etc.)",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Gets a list of all users and associated info",
        "security": [
          {
            "passport": ["read"]
          }
        ]
      }
    },
    "/api/users/{username}": {
      "get": {
        "description": "# Returns a display name and avatar_url by username. used for getting info about a specific user",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": ["Users"],
        "summary": "Get a user's details by username",
        "security": [
          {
            "passport": ["read"]
          }
        ]
      }
    },
    "/api/users/id/{user_id}": {
      "get": {
        "description": "# Preferable endpoint to use when looking for a specific user. Internally user_id should be used instead of username as it is a more unique identifier without revealing details.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": ["Users"],
        "summary": "Get a user's details by user_id"
      }
    },
    "/api/profile": {
      "get": {
        "description": "# Return's logged in user's data. User ID is obtained from authentication middleware",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Users"],
        "summary": "Get a user's details by user_id",
        "security": [
          {
            "OAuth2": ["read"]
          }
        ]
      }
    },
    "securityDefinitions": {
      "OAuth2": {
        "type": "oauth2",
        "authorizationUrl": "https://example.com/oauth2/authorize",
        "flow": "implicit",
        "scopes": {
          "read": "Grants read-only access to user profiles"
        }
      }
    },
    "/api/users/me/geodata": {
      "get": {
        "description": "# Returns all of logged in user's Geodata posts  \n# ***DELETE /api/geodata/{geodata_id}*** endpoint can then be used to remove posts that the user no longer wants people to see.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Users"],
        "summary": "Gets all geodata posted by a single user"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Users"],
        "description": "# Used when a user wishes to delete their account or for some other reason remove all of their posts, user must be authenticated to do this.                                           ",
        "summary": "Deletes all Geodata associated with specified user_id. "
      }
    },
    "/api/geodata": {
      "get": {
        "description": "# Only used for generating pins on the map (to save on payload size). \n# \n# When clicked, the pins will then make a GET request to ***/api/geodata/{geodata_id}*** to display the post in question\n \n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": ["Geodata"],
        "summary": "Gets all geodata stored in database",
        "security": [
          {
            "passport": ["read"]
          }
        ]
      },
      "post": {
        "description": "# Used when user adds a post to the map. \n# \n# It must have the users current location and user_id so that it can be added in the correct location on the map when fetched    ",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "example": {
                  "comment": "Loving the weather",
                  "img_url": "https://i.imgur.com/KT5sbOH.jpeg",
                  "user_id": 1,
                  "location": [-75.1001345742366, 123.34633830198504]
                }
              }
            }
          }
        },
        "tags": ["Geodata"],
        "summary": "Creates new Geodata entry in database"
      }
    },
    "/api/geodata/{geodata_id}": {
      "get": {
        "description": "# Used when user clicks a pin on the map, the data can then be returned so that the user can view the comment, photo etc.",
        "parameters": [
          {
            "name": "geodata_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Geodata"],
        "summary": "Gets data associated with specific Geodata ID"
      },
      "delete": {
        "description": "# Used if a user wishes to remove their own post.\n# Must not be allowed to be called unless user is authorised to delete.",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Geodata"],
        "summary": "Deletes Geodata entry matching specified geodata_id"
      }
    },
    "/api/trips/me": {
      "get": {
        "description": "# Used to retrieve all fog data associated with logged in user.\n\n# Ideally called when application loads/user logs in successfully.                      ",
        "parameters": [
          {
            "name": "trip_id",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Trips"],
        "summary": "Gets a list of all trips by user_id"
      },
      "post": {
        "description": "# Used to post new trip coordinates etc. to database.\n# \n# Data is formatted after being sent into a database friendly format                    \n",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "example": {
                  "user_id": 1,
                  "trips": [
                    {
                      "trip_id": 1,
                      "points": [
                        {
                          "coordinates": [
                            -0.1429489005651874, 51.50080870807764
                          ],
                          "circleSize": 0.5
                        },
                        {
                          "coordinates": [
                            -0.15314146762585779, 51.534935924609954
                          ],
                          "circleSize": 0.5
                        }
                      ]
                    },
                    {
                      "trip_id": 2,
                      "points": [
                        {
                          "coordinates": [
                            -0.1429489005651874, 51.50080870807764
                          ],
                          "circleSize": 0.5
                        },
                        {
                          "coordinates": [-0.232332305651874, 51.777770807764],
                          "circleSize": 0.5
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": ["Trips"],
        "summary": "Posts new trip data to database"
      },
      "delete": {
        "description": "# Used to delete all trip/fog data from logged in user's account",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Trips"],
        "summary": "Deletes all trips by user_id"
      }
    },
    "/home": {
      "get": {
        "description": "# Returns whether user is logged in or not, can be used in front end to check whether to display sign in page?",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/auth/logout": {
      "get": {
        "summary": "Logs out user",
        "description": "# Logs out the current user and then returns to /home, which displays the loggedIn: false property",
        "parameters": [],
        "responses": {},
        "tags": ["Authentication"]
      }
    },
    "/auth/signup": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Creates a new user account",
        "description": "# Creates a new user account with the given credentials",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "example": {
                  "display_name": "User",
                  "username": "user",
                  "password": "password"
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "201": {
            "description": "User account created successfully"
          },
          "400": {
            "description": "Invalid input parameters"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logs in a user",
        "description": "# Signs in a user with the given credentials",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "example": {
                  "username": "user",
                  "password": "password"
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User signed in successfully"
          },
          "400": {
            "description": "Invalid input parameters"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "passport-local": []
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Users",
      "description": "All API endpoints related to Users"
    },
    {
      "name": "Geodata",
      "description": "All API endpoints related to Geodata"
    },
    {
      "name": "Trips",
      "description": "All API endpoints related to Trips"
    },
    {
      "name": "Authentication",
      "description": "All API endpoints related to Authentication"
    }
  ]
}
